# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Other DSL's for routes (but maybe not fully checkable by the Scala compiler)
# compare HTTP routing DSL in Scala: akka, scalatra, lift

# https://blog.knoldus.com/2017/06/12/akka-http-vs-other-rest-api-tools/
# https://fr.slideshare.net/takezoe/scala-frameworks-for-web-application-2016
# https://www.playframework.com/documentation/2.5.x/ScalaEmbeddingPlay
# https://www.playframework.com/documentation/2.5.x/ScalaSirdRouter
# http://doc.akka.io/docs/akka-http/current/scala/http/routing-dsl/overview.html
# http://spray.io/documentation/1.2.4/spray-routing/ ==> spray is no longer maintained and has been superseded by Akka HTTP.

# Home page
GET     /                   controllers.Application.index

# TODO put it in files/
GET /robots.txt             controllers.Assets.at(path="/public", file="robots.txt")

# GET /bla controllers.HomeController.bla()

GET     /display            controllers.Application.displayURI(displayuri:String, blanknode:String ?= "", Edit:String?="", formuri:String ?="")
GET     /load-uri           controllers.Application.loadURI(uri:String)
POST    /load-uri           controllers.Application.loadURIpost()
# GET     /display2            controllers.Application.displayURI2(displayuri:String)
POST    /load               controllers.Application.loadAction()
GET     /table              controllers.Application.table()

GET     /edit               controllers.Application.edit( url:String )
POST    /save               controllers.Application.saveAction()
GET     /create             controllers.Application.createAction()
GET     /create-data        controllers.Application.createData()

GET     /download           controllers.Application.downloadAction( url:String, database:String ?="TDB" )
GET     /form               controllers.Application.form(displayuri:String, blanknode:String ?= "", Edit:String?="", formuri:String ?="", database:String ?="TDB")
GET     /form-data          controllers.Application.formDataAction(displayuri:String, blanknode:String ?= "", Edit:String?="", formuri:String ?="", database:String ?="TDB")
GET     /sparql-form        controllers.Application.sparqlForm(query:String, Edit:String?="", formuri:String ?="", database:String ?="TDB")

GET     /page               controllers.SemanticController.page()

GET     /sparql-ui          controllers.Application.sparql( query:String )
POST    /sparql-ui          controllers.Application.sparql( query:String )

# Construct or SELECT 
GET     /sparql             controllers.Application.sparqlGET( query:String )
GET     /sparql2            controllers.Application.sparqlGetUnionGraph( query:String )

# application/x-www-form-urlencoded
POST    /sparql             controllers.Application.sparqlPOST()
POST    /sparql2            controllers.Application.sparqlPOSTUnionGraph()

POST    /sparql-data        controllers.Application.sparqlDataPOST()
GET     /sparql-data        controllers.Application.sparqlDataGET(query: String)

GET     /select-ui          controllers.Application.select( query:String )
POST    /select-ui          controllers.Application.select( query:String )

GET     /update             controllers.Application.updateGET( update:String )
POST    /update             controllers.Application.updatePOST()


GET     /wordsearch         controllers.Application.wordsearchAction(q:String ?= "", clas: String ?= "")
GET     /search             controllers.Application.searchOrDisplayAction(q:String ?= "")
GET     /lookup             controllers.Application.lookupService(QueryString:String, QueryClass: String ?= "")

GET     /backlinks          controllers.Application.backlinksAction(q:String ?= "")
GET     /esearch            controllers.Application.extSearch(q:String ?= "")

GET     /tools			    controllers.Application.toolsPage
GET     /showNamedGraphs    controllers.Application.showNamedGraphsAction
GET     /showTriplesInGraph controllers.Application.showTriplesInGraphAction(uri: String)
GET     /history            controllers.Application.makeHistoryUserActionsAction(limit: String?= "")

# authentication

GET     /login                      @controllers.AuthService.login
POST    /authenticate               @controllers.AuthService.authenticate
GET     /authenticate               @controllers.AuthService.authenticate
POST    /register                   @controllers.AuthService.register
GET     /register                   @controllers.AuthService.register
GET     /logout                     @controllers.AuthService.logout

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               @controllers.Assets.at(path="/public", file)
# files in local files/ directory are served like Apache does:
GET     /files/*file                @controllers.Files.at(file)

# LDP
GET     /ldp/*uri              controllers.Application.ldp(uri: String)
GET     /ldp                   controllers.Application.ldp(uri: String ?= "")
POST    /ldp/*uri              controllers.Application.ldpPOSTAction(uri: String)
POST    /ldp                   controllers.Application.ldpPOSTActionNoURI()
PUT     /ldp/*uri              controllers.Application.ldpPOSTAction(uri: String)
PUT     /ldp                   controllers.Application.ldpPOSTActionNoURI()
DELETE  /ldp/*uri              controllers.Application.ldpDeleteResource(uri: String)
HEAD    /ldp/*uri              controllers.Application.ldpHEAD(uri: String)
OPTIONS /*path                 controllers.Application.httpOptions(path)

# see https://www.w3.org/TR/void/#well-known
GET /.well-known/void          controllers.Application.wellKnownVoid()
