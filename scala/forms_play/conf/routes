# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Other DSL's for routes (but maybe not fully checkable by the Scala compiler)
# compare HTTP routing DSL in Scala: akka, scalatra, lift

# https://blog.knoldus.com/2017/06/12/akka-http-vs-other-rest-api-tools/
# https://fr.slideshare.net/takezoe/scala-frameworks-for-web-application-2016
# https://www.playframework.com/documentation/2.5.x/ScalaEmbeddingPlay
# https://www.playframework.com/documentation/2.5.x/ScalaSirdRouter
# http://doc.akka.io/docs/akka-http/current/scala/http/routing-dsl/overview.html
# http://spray.io/documentation/1.2.4/spray-routing/ ==> spray is no longer maintained and has been superseded by Akka HTTP.

# Home page
GET     /                   @controllers.WebPagesApp.index

# TODO put it in files/
GET /robots.txt             controllers.Assets.at(path="/public", file="robots.txt")

# GET /bla controllers.HomeController.bla()

GET     /display            @controllers.WebPagesApp.displayURI(displayuri:String, blanknode:String ?= "", Edit:String?="", formuri:String ?="")
GET     /load-uri          @controllers.ServicesApp.loadURI(uri:String)
POST    /load-uri          @controllers.ServicesApp.loadURIpost()

POST    /load               @controllers.SparqlServices.loadAction()
GET     /table              @controllers.WebPagesApp.table()

GET     /edit               @controllers.WebPagesApp.edit( url:String )
POST    /save               @controllers.WebPagesApp.saveAction()
GET     /create             @controllers.WebPagesApp.createAction()

GET     /create-data       @controllers.FormServicesApp.createData()
GET     /form-data         @controllers.FormServicesApp.formDataAction(displayuri:String, blanknode:String ?= "", Edit:String?="", formuri:String ?="", database:String ?="TDB")
POST    /sparql-data       @controllers.FormServicesApp.sparqlDataPOST()
GET     /sparql-data       @controllers.FormServicesApp.sparqlDataGET(query: String)

GET     /download          @controllers.DownloadServiceApp.downloadAction( url:String, database:String ?="TDB" )
GET     /form              @controllers.WebPagesTechApp.form(displayuri:String, blanknode:String ?= "", Edit:String?="", formuri:String ?="", database:String ?="TDB")
GET     /sparql-form        @controllers.WebPagesApp.sparqlForm(query:String, Edit:String?="", formuri:String ?="", database:String ?="TDB")

GET     /page               controllers.SemanticControllerObject.page()

GET     /sparql-ui          @controllers.WebPagesApp.sparql( query:String )
POST    /sparql-ui          @controllers.WebPagesApp.sparql( query:String )
GET     /select-ui          @controllers.WebPagesApp.select( query:String )
POST    /select-ui          @controllers.WebPagesApp.select( query:String )

# Construct or SELECT 
GET     /sparql             @controllers.SparqlServicesGET.sparqlGET( query:String )
GET     /sparql2            @controllers.SparqlServicesGET.sparqlGetUnionGraph( query:String )

# application/x-www-form-urlencoded
POST    /sparql             @controllers.SparqlServicesGET.sparqlPOST()
POST    /sparql2            @controllers.SparqlServicesGET.sparqlPOSTUnionGraph()

GET     /update             @controllers.SparqlServices.updateGET( update:String )
POST    /update             @controllers.SparqlServices.updatePOST()


GET     /wordsearch         @controllers.WebPagesApp.wordsearchAction(q:String ?= "", clas: String ?= "")
GET     /search             @controllers.WebPagesApp.searchOrDisplayAction(q:String ?= "")
GET     /lookup            @controllers.LookupServiceApp.lookupService(QueryString:String, QueryClass: String ?= "")

GET     /backlinks          @controllers.WebPagesApp.backlinksAction(q:String ?= "")
GET     /esearch            @controllers.WebPagesApp.extSearch(q:String ?= "")

GET     /tools		    @controllers.WebPagesApp.toolsPage
GET     /showNamedGraphs    @controllers.WebPagesApp.showNamedGraphsAction
GET     /showTriplesInGraph  @controllers.WebPagesApp.showTriplesInGraphAction(uri: String)
GET     /history            @controllers.WebPagesApp.makeHistoryUserActionsAction(limit: String?= "")

# authentication

GET     /login                      @controllers.AuthService.login
POST    /authenticate               @controllers.AuthService.authenticate
GET     /authenticate               @controllers.AuthService.authenticate
POST    /register                   @controllers.AuthService.register
GET     /register                   @controllers.AuthService.register
GET     /logout                     @controllers.AuthService.logout

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               @controllers.Assets.at(path="/public", file)
# files in local files/ directory are served like Apache does:
GET     /files/*file                @controllers.Files.at(file)

GET     /proxy                @controllers.ProxyServicesApp.getProxy(originalurl: String)

GET     /ldp/*uri             @controllers.LDPgetServicesApp.ldp(uri: String)
GET     /ldp                  @controllers.LDPgetServicesApp.ldp(uri: String ?= "")

POST    /ldp/*uri             @controllers.LDPservicesApp.ldpPOSTAction(uri: String)
POST    /ldp                  @controllers.LDPservicesApp.ldpPOSTActionNoURI()
PUT     /ldp/*uri             @controllers.LDPservicesApp.ldpPOSTAction(uri: String)
PUT     /ldp                  @controllers.LDPservicesApp.ldpPOSTActionNoURI()
DELETE  /ldp/*uri             @controllers.LDPservicesApp.ldpDeleteResource(uri: String)
HEAD    /ldp/*uri             @controllers.LDPservicesApp.ldpHEAD(uri: String)

GET     /json2rdf             @controllers.Json2RDFServiceApp.json2rdf

OPTIONS /*path                @controllers.ServicesApp.httpOptions(path)

# see https://www.w3.org/TR/void/#well-known
GET /.well-known/void         @controllers.ServicesApp.wellKnownVoid()
